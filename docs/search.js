window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "winotify", "modulename": "winotify", "type": "module", "doc": "<h1 id=\"what-is-winotify\">What is winotify?</h1>\n\n<p>winotify is a python library and a command-line application to \nmake Windows 10 toast notification.</p>\n\n<h1 id=\"features\">Features</h1>\n\n<ul>\n<li>Notification stays in action center</li>\n<li>Clickable notification with 5 additional buttons</li>\n<li>Use function as a callback when clicking the notification</li>\n</ul>\n\n<h1 id=\"installation\">Installation</h1>\n\n<p>Install winotify using pip</p>\n\n<div class=\"codehilite\"><pre><span></span><code>pip install winotify\n</code></pre></div>\n\n<h1 id=\"example\">Example</h1>\n\n<h2 id=\"a-simple-notification-with-icon\">A simple notification with icon</h2>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">winotify</span> <span class=\"kn\">import</span> <span class=\"n\">Notification</span>\n\n<span class=\"n\">toast</span> <span class=\"o\">=</span> <span class=\"n\">Notification</span><span class=\"p\">(</span><span class=\"n\">app_id</span><span class=\"o\">=</span><span class=\"s2\">&quot;example app&quot;</span><span class=\"p\">,</span>\n                     <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">&quot;Winotify Test Toast&quot;</span><span class=\"p\">,</span>\n                     <span class=\"n\">msg</span><span class=\"o\">=</span><span class=\"s2\">&quot;New Notification!&quot;</span><span class=\"p\">,</span>\n                     <span class=\"n\">icon</span><span class=\"o\">=</span><span class=\"sa\">r</span><span class=\"s2\">&quot;C:\\path\\to\\icon.png&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">toast</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<h1 id=\"how-to\">How to ...</h1>\n\n<h2 id=\"add-buttons-to-the-notification\">... add buttons to the notification</h2>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">winotify</span> <span class=\"kn\">import</span> <span class=\"n\">Notification</span><span class=\"p\">,</span> <span class=\"n\">audio</span>\n\n<span class=\"n\">toast</span> <span class=\"o\">=</span> <span class=\"n\">Notification</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"n\">toast</span><span class=\"o\">.</span><span class=\"n\">add_actions</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s2\">&quot;open github&quot;</span><span class=\"p\">,</span>\n                 <span class=\"n\">launch</span><span class=\"o\">=</span><span class=\"s2\">&quot;https://github.com/versa-syahptr/winotify/&quot;</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<h2 id=\"set-sound-of-the-notification\">... set sound of the notification</h2>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">winotify</span> <span class=\"kn\">import</span> <span class=\"n\">Notification</span><span class=\"p\">,</span> <span class=\"n\">audio</span>\n\n<span class=\"n\">toast</span> <span class=\"o\">=</span> <span class=\"n\">Notification</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"n\">toast</span><span class=\"o\">.</span><span class=\"n\">set_audio</span><span class=\"p\">(</span><span class=\"n\">audio</span><span class=\"o\">.</span><span class=\"n\">Mail</span><span class=\"p\">,</span> <span class=\"n\">loop</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p>All supported audio are in the <code>audio</code> module</p>\n\n<h2 id=\"use-callback-feature\">... use callback feature</h2>\n\n<p>this is an advanced feature of winotify. Please follow this guide carefully</p>\n\n<ul>\n<li>Declare your app id, default interpreter, and script path globally</li>\n</ul>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">winotify</span>\n\n<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">winotify</span><span class=\"o\">.</span><span class=\"n\">Registry</span><span class=\"p\">(</span><span class=\"s2\">&quot;app_id&quot;</span><span class=\"p\">,</span> <span class=\"n\">winotify</span><span class=\"o\">.</span><span class=\"n\">PY_EXE</span><span class=\"p\">,</span> <span class=\"sa\">r</span><span class=\"s2\">&quot;c:\\abs\\path\\to\\script.py&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">notifier</span> <span class=\"o\">=</span> <span class=\"n\">winotify</span><span class=\"o\">.</span><span class=\"n\">Notifier</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<ul>\n<li>Register a function to use as a callback using <code>Notifier.register_callback</code> decorator</li>\n</ul>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nd\">@notifier</span><span class=\"o\">.</span><span class=\"n\">register_callback</span>\n<span class=\"k\">def</span> <span class=\"nf\">say_hello</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;hello&quot;</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<ul>\n<li>Create new <code>Notification</code> using <code>Notifier.create_notification()</code> \nthen pass the registered function to <code>launch</code> parameter,</li>\n</ul>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">toast</span> <span class=\"o\">=</span> <span class=\"n\">notifier</span><span class=\"o\">.</span><span class=\"n\">create_notification</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">&quot;a notification&quot;</span><span class=\"p\">,</span> \n                                     <span class=\"n\">msg</span><span class=\"o\">=</span><span class=\"s1\">&#39;a notification test with callback&#39;</span><span class=\"p\">,</span>\n                                     <span class=\"n\">launch</span><span class=\"o\">=</span><span class=\"n\">say_hello</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># or pass it to `Notification.add_actions()`</span>\n\n<span class=\"n\">toast</span><span class=\"o\">.</span><span class=\"n\">add_actions</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s2\">&quot;say hello in console&quot;</span><span class=\"p\">,</span>\n                  <span class=\"n\">launch</span><span class=\"o\">=</span><span class=\"n\">say_hello</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<ul>\n<li>Start the notifier thread</li>\n</ul>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n    <span class=\"n\">notifier</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<h1 id=\"command-line-application\">Command-line Application</h1>\n\n<div class=\"codehilite\"><pre><span></span><code>winotify.exe <span class=\"se\">^</span>\n<span class=\"se\">-</span>id myApp <span class=\"se\">^</span>\n<span class=\"se\">-</span>t <span class=\"s2\">&quot;A Title&quot;</span> <span class=\"se\">^</span>\n<span class=\"se\">-</span>m <span class=\"s2\">&quot;A message&quot;</span> <span class=\"se\">^</span>\n<span class=\"se\">-</span>i <span class=\"s2\">&quot;c:\\path\\to\\icon.png&quot;</span> <span class=\"se\">^</span>\n<span class=\"se\">-</span>-audio default <span class=\"se\">^</span>\n<span class=\"se\">-</span>-open-url <span class=\"s2\">&quot;http://google.com&quot;</span> <span class=\"se\">^</span>\n<span class=\"se\">-</span>-action <span class=\"s2\">&quot;open github&quot;</span> <span class=\"se\">^</span>\n<span class=\"se\">-</span>-action_url <span class=\"s2\">&quot;http://github.com&quot;</span>         \n</code></pre></div>\n\n<blockquote>\n  <p>Use <code>winotify-nc.exe</code> instead of <code>winotify.exe</code> to hide the console window.</p>\n</blockquote>\n"}, {"fullname": "winotify.Notifier", "modulename": "winotify", "qualname": "Notifier", "type": "class", "doc": "<p></p>\n"}, {"fullname": "winotify.Notifier.__init__", "modulename": "winotify", "qualname": "Notifier.__init__", "type": "function", "doc": "<p>A <code>Notification</code> manager class.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>registry:</strong>  A <code>Registry</code> instance containing the <code>app_id</code>, default interpreter, and the script path.</li>\n</ul>\n", "signature": "(self, registry: winotify._registry.Registry)", "funcdef": "def"}, {"fullname": "winotify.Notifier.callbacks", "modulename": "winotify", "qualname": "Notifier.callbacks", "type": "variable", "doc": "<p>Returns:\nA dictionary containing all registered callbacks, with each function's name as the key</p>\n"}, {"fullname": "winotify.Notifier.set_icon", "modulename": "winotify", "qualname": "Notifier.set_icon", "type": "function", "doc": "<p>Set icon globally for all notification</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>path:</strong>  The absolute path of the icon</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "(self, path: str)", "funcdef": "def"}, {"fullname": "winotify.Notifier.create_notification", "modulename": "winotify", "qualname": "Notifier.create_notification", "type": "function", "doc": "<h6 id=\"see-also\">See Also</h6>\n\n<blockquote>\n  <p><code>Notification</code></p>\n</blockquote>\n\n<h6 id=\"notes\">Notes</h6>\n\n<blockquote>\n  <p><code>launch</code> parameter can be a callback function here</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><code>Notification</code> object</p>\n</blockquote>\n", "signature": "(\n    self,\n    title: str,\n    msg: str = '',\n    icon: str = '',\n    duration: str = 'short',\n    launch: Union[str, Callable] = ''\n) -> winotify.Notification", "funcdef": "def"}, {"fullname": "winotify.Notifier.start", "modulename": "winotify", "qualname": "Notifier.start", "type": "function", "doc": "<p>Start the listener thread. This method <em>must</em> be called first in the main function,\nOtherwise, all the callback function will never get called.</p>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"codehilite\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;__main__&quot;</span><span class=\"p\">:</span>\n    <span class=\"n\">notifier</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n    <span class=\"o\">...</span>\n</code></pre></div>\n</blockquote>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "winotify.Notifier.update", "modulename": "winotify", "qualname": "Notifier.update", "type": "function", "doc": "<p>check for available callback function in queue then call it\nthis method <em>must</em> be called <em>every time</em> in loop.</p>\n\n<p>If all callback functions don't need to run in main thread, calling this functions is <em>optional</em></p>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"codehilite\"><pre><span></span><code><span class=\"c1\"># the main loop</span>\n<span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n    <span class=\"n\">notifier</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n    <span class=\"o\">...</span>\n</code></pre></div>\n</blockquote>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "winotify.Notifier.register_callback", "modulename": "winotify", "qualname": "Notifier.register_callback", "type": "function", "doc": "<p>A decorator to register a function to be used as a callback</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>func:</strong>  the function to decorate</li>\n<li><strong>run_in_main_thread:</strong>  If True, the callback function will run in main thread</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"codehilite\"><pre><span></span><code><span class=\"nd\">@notifier</span><span class=\"o\">.</span><span class=\"n\">register_callback</span>\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">():</span> <span class=\"o\">...</span>\n</code></pre></div>\n</blockquote>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The registered function</p>\n</blockquote>\n", "signature": "(self, func=None, *, run_in_main_thread=False)", "funcdef": "def"}, {"fullname": "winotify.Notifier.callback_to_url", "modulename": "winotify", "qualname": "Notifier.callback_to_url", "type": "function", "doc": "<p>Translate the registered callback function <code>func</code> to url notation.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>func:</strong>  The registered callback function</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>url-notation string eg. <code>my-app-id:foo</code>, where <strong>my-app-id</strong> is the app id and <strong>foo</strong> is the function name</p>\n</blockquote>\n", "signature": "(self, func: Callable) -> str", "funcdef": "def"}, {"fullname": "winotify.Notifier.clear", "modulename": "winotify", "qualname": "Notifier.clear", "type": "function", "doc": "<p>Clear all notification created by <code>Notifier</code> from action center</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "winotify.Notification", "modulename": "winotify", "qualname": "Notification", "type": "class", "doc": "<p></p>\n"}, {"fullname": "winotify.Notification.__init__", "modulename": "winotify", "qualname": "Notification.__init__", "type": "function", "doc": "<p>Construct a new notification</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>app_id:</strong>  your app name, make it readable to your user. It can contain spaces, however special characters\n(eg. \u00e9) are not supported.</li>\n<li><strong>title:</strong>  The heading of the toast.</li>\n<li><strong>msg:</strong>  The content/message of the toast.</li>\n<li><strong>icon:</strong>  An optional path to an image to display on the left of the title &amp; message.\nMake sure the path is absolute.</li>\n<li><strong>duration:</strong>  How long the toast should show up for (short/long), default is short.</li>\n<li><strong>launch:</strong>  The url or callback to launch (invoked when the user clicks the notification)</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<blockquote>\n  <p>If you want to pass a callback to <code>launch</code> parameter,\n  please use <code>create_notification</code> from <code>Notifier</code> object</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  If the duration specified is not short or long</li>\n</ul>\n", "signature": "(\n    self,\n    app_id: str,\n    title: str,\n    msg: str = '',\n    icon: str = '',\n    duration: str = 'short',\n    launch: str = ''\n)", "funcdef": "def"}, {"fullname": "winotify.Notification.set_audio", "modulename": "winotify", "qualname": "Notification.set_audio", "type": "function", "doc": "<p>Set the audio for the notification</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>sound:</strong>  The audio to play when the notification is showing. Choose one from <code>winotify.audio</code> module,\n(eg. audio.Default). The default for all notification is silent.</li>\n<li><strong>loop:</strong>  If True, the audio will play indefinitely until user click or dismis the notification.</li>\n</ul>\n", "signature": "(self, sound: winotify.audio.Sound, loop: bool)", "funcdef": "def"}, {"fullname": "winotify.Notification.add_actions", "modulename": "winotify", "qualname": "Notification.add_actions", "type": "function", "doc": "<p>Add buttons to the notification. Each notification can have 5 buttons max.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>label:</strong>  The label of the button</li>\n<li><strong>launch:</strong>  The url to launch when clicking the button, 'file:///' protocol is allowed. Or a registered\ncallback function</li>\n</ul>\n\n<p>Returns: None</p>\n\n<h6 id=\"notes\">Notes</h6>\n\n<blockquote>\n  <p>Register a callback function using <code>Notifier.register_callback()</code> decorator before passing it here</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  If the callback function is not registered</li>\n</ul>\n", "signature": "(self, label: str, launch: Union[str, Callable] = '')", "funcdef": "def"}, {"fullname": "winotify.Notification.build", "modulename": "winotify", "qualname": "Notification.build", "type": "function", "doc": "<p>This method is deprecated, call <code>Notification.show()</code> directly instead.</p>\n\n<h6 id=\"warnings\">Warnings</h6>\n\n<blockquote>\n  <p>DeprecationWarning</p>\n</blockquote>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "winotify.Notification.show", "modulename": "winotify", "qualname": "Notification.show", "type": "function", "doc": "<p>Show the toast</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "winotify.Registry", "modulename": "winotify", "qualname": "Registry", "type": "class", "doc": "<p></p>\n"}, {"fullname": "winotify.Registry.__init__", "modulename": "winotify", "qualname": "Registry.__init__", "type": "function", "doc": "<p>register app_id to Windows Registry as a protocol,\neg. the app_id is \"My Awesome App\" can be called from browser or run.exe by typing \"my-awesome-app:[Params]\"\nParams can be a function name to call</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>app_id:</strong>  your app name, make it readable to your user. It can contain spaces, however special characters\n(eg. \u00e9) are not supported.</li>\n<li><strong>executable:</strong>  set the default interpreter or executable to run when a notification is clicked,\ndefault is <code>PY_EXE</code> which is python.exe. To hide cmd flashing when a notification is clicked,\nuse <code>PYW_EXE</code>.</li>\n<li><strong>script_path:</strong>  The script path, usually <code>__file__</code>.</li>\n<li><strong>force_override:</strong>  If True, force replace the exists registry value in Windows Registry. Default is False.\nSet it True if you want to change default interpreter or script path.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>InvalidKeyStructure:</strong>  If <code>force_override</code> is True but the registry value is not created by winotify or\nthe key structure is invalid.</li>\n</ul>\n", "signature": "(\n    self,\n    app_id: str,\n    executable=PY_EXE,\n    script_path: str = '',\n    *,\n    force_override=False\n)", "funcdef": "def"}, {"fullname": "winotify.audio", "modulename": "winotify.audio", "type": "module", "doc": "<p></p>\n"}, {"fullname": "winotify.audio.Sound", "modulename": "winotify.audio", "qualname": "Sound", "type": "class", "doc": "<p></p>\n"}, {"fullname": "winotify.audio.Sound.__init__", "modulename": "winotify.audio", "qualname": "Sound.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, s)", "funcdef": "def"}, {"fullname": "winotify.audio.Default", "modulename": "winotify.audio", "qualname": "Default", "type": "variable", "doc": "<p></p>\n", "default_value": " = <winotify.audio.Sound object>"}, {"fullname": "winotify.audio.IM", "modulename": "winotify.audio", "qualname": "IM", "type": "variable", "doc": "<p></p>\n", "default_value": " = <winotify.audio.Sound object>"}, {"fullname": "winotify.audio.Mail", "modulename": "winotify.audio", "qualname": "Mail", "type": "variable", "doc": "<p></p>\n", "default_value": " = <winotify.audio.Sound object>"}, {"fullname": "winotify.audio.Reminder", "modulename": "winotify.audio", "qualname": "Reminder", "type": "variable", "doc": "<p></p>\n", "default_value": " = <winotify.audio.Sound object>"}, {"fullname": "winotify.audio.SMS", "modulename": "winotify.audio", "qualname": "SMS", "type": "variable", "doc": "<p></p>\n", "default_value": " = <winotify.audio.Sound object>"}, {"fullname": "winotify.audio.LoopingAlarm", "modulename": "winotify.audio", "qualname": "LoopingAlarm", "type": "variable", "doc": "<p></p>\n", "default_value": " = <winotify.audio.Sound object>"}, {"fullname": "winotify.audio.LoopingAlarm2", "modulename": "winotify.audio", "qualname": "LoopingAlarm2", "type": "variable", "doc": "<p></p>\n", "default_value": " = <winotify.audio.Sound object>"}, {"fullname": "winotify.audio.LoopingAlarm3", "modulename": "winotify.audio", "qualname": "LoopingAlarm3", "type": "variable", "doc": "<p></p>\n", "default_value": " = <winotify.audio.Sound object>"}, {"fullname": "winotify.audio.LoopingAlarm4", "modulename": "winotify.audio", "qualname": "LoopingAlarm4", "type": "variable", "doc": "<p></p>\n", "default_value": " = <winotify.audio.Sound object>"}, {"fullname": "winotify.audio.LoopingAlarm6", "modulename": "winotify.audio", "qualname": "LoopingAlarm6", "type": "variable", "doc": "<p></p>\n", "default_value": " = <winotify.audio.Sound object>"}, {"fullname": "winotify.audio.LoopingAlarm8", "modulename": "winotify.audio", "qualname": "LoopingAlarm8", "type": "variable", "doc": "<p></p>\n", "default_value": " = <winotify.audio.Sound object>"}, {"fullname": "winotify.audio.LoopingAlarm9", "modulename": "winotify.audio", "qualname": "LoopingAlarm9", "type": "variable", "doc": "<p></p>\n", "default_value": " = <winotify.audio.Sound object>"}, {"fullname": "winotify.audio.LoopingAlarm10", "modulename": "winotify.audio", "qualname": "LoopingAlarm10", "type": "variable", "doc": "<p></p>\n", "default_value": " = <winotify.audio.Sound object>"}, {"fullname": "winotify.audio.LoopingCall", "modulename": "winotify.audio", "qualname": "LoopingCall", "type": "variable", "doc": "<p></p>\n", "default_value": " = <winotify.audio.Sound object>"}, {"fullname": "winotify.audio.LoopingCall2", "modulename": "winotify.audio", "qualname": "LoopingCall2", "type": "variable", "doc": "<p></p>\n", "default_value": " = <winotify.audio.Sound object>"}, {"fullname": "winotify.audio.LoopingCall3", "modulename": "winotify.audio", "qualname": "LoopingCall3", "type": "variable", "doc": "<p></p>\n", "default_value": " = <winotify.audio.Sound object>"}, {"fullname": "winotify.audio.LoopingCall4", "modulename": "winotify.audio", "qualname": "LoopingCall4", "type": "variable", "doc": "<p></p>\n", "default_value": " = <winotify.audio.Sound object>"}, {"fullname": "winotify.audio.LoopingCall5", "modulename": "winotify.audio", "qualname": "LoopingCall5", "type": "variable", "doc": "<p></p>\n", "default_value": " = <winotify.audio.Sound object>"}, {"fullname": "winotify.audio.LoopingCall6", "modulename": "winotify.audio", "qualname": "LoopingCall6", "type": "variable", "doc": "<p></p>\n", "default_value": " = <winotify.audio.Sound object>"}, {"fullname": "winotify.audio.LoopingCall7", "modulename": "winotify.audio", "qualname": "LoopingCall7", "type": "variable", "doc": "<p></p>\n", "default_value": " = <winotify.audio.Sound object>"}, {"fullname": "winotify.audio.LoopingCall8", "modulename": "winotify.audio", "qualname": "LoopingCall8", "type": "variable", "doc": "<p></p>\n", "default_value": " = <winotify.audio.Sound object>"}, {"fullname": "winotify.audio.LoopingCall9", "modulename": "winotify.audio", "qualname": "LoopingCall9", "type": "variable", "doc": "<p></p>\n", "default_value": " = <winotify.audio.Sound object>"}, {"fullname": "winotify.audio.LoopingCall10", "modulename": "winotify.audio", "qualname": "LoopingCall10", "type": "variable", "doc": "<p></p>\n", "default_value": " = <winotify.audio.Sound object>"}, {"fullname": "winotify.audio.Silent", "modulename": "winotify.audio", "qualname": "Silent", "type": "variable", "doc": "<p></p>\n", "default_value": " = <winotify.audio.Sound object>"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();